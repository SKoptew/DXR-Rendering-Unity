//#include "HLSLSupport.cginc"
#include "UnityShaderVariables.cginc"
#include "RayPayload.hlsl"

RaytracingAccelerationStructure _SceneAccelerationStructure;

RWTexture2D<float4> _RenderTarget;
float4x4            _InvViewMatrix;

TextureCube<half3> _EnvironmentTex;
SamplerState        sampler_linear_repeat;
half               _EnvironmentExposure;

float3 _FrustumBottomLeftDirWS;
float3 _FrustumHorizDirWS;
float3 _FrustumVertDirWS;

#pragma max_recursion_depth 16


[shader("miss")]
void MissShader(inout RayPayload payload : SV_RayPayload)
{
    half3 envColor = _EnvironmentTex.SampleLevel(sampler_linear_repeat, WorldRayDirection(), 0.0);
	payload.color      = envColor * _EnvironmentExposure;
	payload.positionWS = float4(0,0,0,0);
}

[shader("miss")]
void ShadowMissShader(inout ShadowRayPayload payload : SV_RayPayload)
{
    payload.shadowValue = 1.0;
}


[shader("raygeneration")]
void RaygenShader()
{
    uint2 dispatchIdx = DispatchRaysIndex().xy;
    uint2 dispatchDim = DispatchRaysDimensions().xy;
       
    float2 frameCoord = float2(dispatchIdx.x, dispatchIdx.y) + float2(0.5, 0.5);
    float2 UV         = frameCoord / float2(dispatchDim.x, dispatchDim.y);    
    
    float3 viewDirWS = normalize(_FrustumBottomLeftDirWS + UV.x * _FrustumHorizDirWS
                                                         + UV.y * _FrustumVertDirWS);
    
    RayDesc ray;
    ray.Origin    = float3(_InvViewMatrix[0][3], _InvViewMatrix[1][3], _InvViewMatrix[2][3]);
    ray.Direction = viewDirWS;
    ray.TMin      = 0.0;
    ray.TMax      = 1e20f;    
    
    RayPayload payload;
    payload.color = float3(0,0,0);
    payload.bounceIndex = 0;
    
    
    const uint missShaderID = 0;
    TraceRay(_SceneAccelerationStructure, 
             0,                  // RayFlags
             0xFF,               // InstanceInclusionMask
             0,                  // RayContributionToHitGroupIndex
             1,                  // MultiplierForGeometryContributionToHitGroupIndex
             missShaderID,
             ray,
             payload);
         
    float4 finalColor = float4(payload.color, 1.0);
     
    //-- Directional light shadow raycast ------------------------------------------------
    if (payload.positionWS.a > 0.0)
    {    
        RayDesc shadowRay;
        shadowRay.Origin    = payload.positionWS.xyz;
        shadowRay.Direction = _WorldSpaceLightPos0.xyz;
        shadowRay.TMin      = 0.0001;
        shadowRay.TMax      = 1e20f;     
        
        ShadowRayPayload shadowPayload;
        shadowPayload.shadowValue = 0.15;
        
        
        const uint shadowMissShaderID = 1;
        TraceRay(_SceneAccelerationStructure,
                 RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH | RAY_FLAG_SKIP_CLOSEST_HIT_SHADER | RAY_FLAG_CULL_BACK_FACING_TRIANGLES,
                 0xFF,               // InstanceInclusionMask
                 0,                  // RayContributionToHitGroupIndex
                 1,                  // MultiplierForGeometryContributionToHitGroupIndex
                 shadowMissShaderID,
                 shadowRay,
                 shadowPayload);
    
        finalColor *= shadowPayload.shadowValue;
    }
       
    _RenderTarget[dispatchIdx] = finalColor;    
}
